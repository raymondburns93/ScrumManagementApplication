//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumManagementApp.Client.ProjectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/CreateProject", ReplyAction="http://tempuri.org/IProjectService/CreateProjectResponse")]
        ScrumManagementApp.Common.DTOs.ProjectDTO CreateProject(ScrumManagementApp.Common.DTOs.ProjectDTO project, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/CreateProject", ReplyAction="http://tempuri.org/IProjectService/CreateProjectResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> CreateProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO project, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        ScrumManagementApp.Common.DTOs.ProjectDTO[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsForUser", ReplyAction="http://tempuri.org/IProjectService/GetProjectsForUserResponse")]
        ScrumManagementApp.Common.DTOs.ProjectDTO[] GetProjectsForUser(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsForUser", ReplyAction="http://tempuri.org/IProjectService/GetProjectsForUserResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO[]> GetProjectsForUserAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectManagerForProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectManagerForProjectResponse")]
        ScrumManagementApp.Common.DTOs.UserDTO GetProjectManagerForProject(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectManagerForProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectManagerForProjectResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO> GetProjectManagerForProjectAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductOwnerForProject", ReplyAction="http://tempuri.org/IProjectService/GetProductOwnerForProjectResponse")]
        ScrumManagementApp.Common.DTOs.UserDTO GetProductOwnerForProject(int ProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProductOwnerForProject", ReplyAction="http://tempuri.org/IProjectService/GetProductOwnerForProjectResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO> GetProductOwnerForProjectAsync(int ProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetScrumMastersForProject", ReplyAction="http://tempuri.org/IProjectService/GetScrumMastersForProjectResponse")]
        ScrumManagementApp.Common.DTOs.UserDTO[] GetScrumMastersForProject(int ProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetScrumMastersForProject", ReplyAction="http://tempuri.org/IProjectService/GetScrumMastersForProjectResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO[]> GetScrumMastersForProjectAsync(int ProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectById", ReplyAction="http://tempuri.org/IProjectService/GetProjectByIdResponse")]
        ScrumManagementApp.Common.DTOs.ProjectDTO GetProjectById(int ProjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectById", ReplyAction="http://tempuri.org/IProjectService/GetProjectByIdResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> GetProjectByIdAsync(int ProjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectByName", ReplyAction="http://tempuri.org/IProjectService/GetProjectByNameResponse")]
        ScrumManagementApp.Common.DTOs.ProjectDTO GetProjectByName(string pProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectByName", ReplyAction="http://tempuri.org/IProjectService/GetProjectByNameResponse")]
        System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> GetProjectByNameAsync(string pProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/HasConflictingProjects", ReplyAction="http://tempuri.org/IProjectService/HasConflictingProjectsResponse")]
        bool HasConflictingProjects(int UserID, System.DateTime Start, System.Nullable<System.DateTime> End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/HasConflictingProjects", ReplyAction="http://tempuri.org/IProjectService/HasConflictingProjectsResponse")]
        System.Threading.Tasks.Task<bool> HasConflictingProjectsAsync(int UserID, System.DateTime Start, System.Nullable<System.DateTime> End);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        void UpdateProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        System.Threading.Tasks.Task UpdateProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AssignProductOwnerToProject", ReplyAction="http://tempuri.org/IProjectService/AssignProductOwnerToProjectResponse")]
        void AssignProductOwnerToProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AssignProductOwnerToProject", ReplyAction="http://tempuri.org/IProjectService/AssignProductOwnerToProjectResponse")]
        System.Threading.Tasks.Task AssignProductOwnerToProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AssignsScrumMastersToProject", ReplyAction="http://tempuri.org/IProjectService/AssignsScrumMastersToProjectResponse")]
        void AssignsScrumMastersToProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int[] userIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AssignsScrumMastersToProject", ReplyAction="http://tempuri.org/IProjectService/AssignsScrumMastersToProjectResponse")]
        System.Threading.Tasks.Task AssignsScrumMastersToProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int[] userIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsProjectManager", ReplyAction="http://tempuri.org/IProjectService/IsProjectManagerResponse")]
        bool IsProjectManager(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsProjectManager", ReplyAction="http://tempuri.org/IProjectService/IsProjectManagerResponse")]
        System.Threading.Tasks.Task<bool> IsProjectManagerAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsProductOwner", ReplyAction="http://tempuri.org/IProjectService/IsProductOwnerResponse")]
        bool IsProductOwner(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsProductOwner", ReplyAction="http://tempuri.org/IProjectService/IsProductOwnerResponse")]
        System.Threading.Tasks.Task<bool> IsProductOwnerAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsScrumMaster", ReplyAction="http://tempuri.org/IProjectService/IsScrumMasterResponse")]
        bool IsScrumMaster(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsScrumMaster", ReplyAction="http://tempuri.org/IProjectService/IsScrumMasterResponse")]
        System.Threading.Tasks.Task<bool> IsScrumMasterAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsDeveloper", ReplyAction="http://tempuri.org/IProjectService/IsDeveloperResponse")]
        bool IsDeveloper(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/IsDeveloper", ReplyAction="http://tempuri.org/IProjectService/IsDeveloperResponse")]
        System.Threading.Tasks.Task<bool> IsDeveloperAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : ScrumManagementApp.Client.ProjectService.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<ScrumManagementApp.Client.ProjectService.IProjectService>, ScrumManagementApp.Client.ProjectService.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ScrumManagementApp.Common.DTOs.ProjectDTO CreateProject(ScrumManagementApp.Common.DTOs.ProjectDTO project, int userId) {
            return base.Channel.CreateProject(project, userId);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> CreateProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO project, int userId) {
            return base.Channel.CreateProjectAsync(project, userId);
        }
        
        public ScrumManagementApp.Common.DTOs.ProjectDTO[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public ScrumManagementApp.Common.DTOs.ProjectDTO[] GetProjectsForUser(int UserID) {
            return base.Channel.GetProjectsForUser(UserID);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO[]> GetProjectsForUserAsync(int UserID) {
            return base.Channel.GetProjectsForUserAsync(UserID);
        }
        
        public ScrumManagementApp.Common.DTOs.UserDTO GetProjectManagerForProject(int projectId) {
            return base.Channel.GetProjectManagerForProject(projectId);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO> GetProjectManagerForProjectAsync(int projectId) {
            return base.Channel.GetProjectManagerForProjectAsync(projectId);
        }
        
        public ScrumManagementApp.Common.DTOs.UserDTO GetProductOwnerForProject(int ProjectId) {
            return base.Channel.GetProductOwnerForProject(ProjectId);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO> GetProductOwnerForProjectAsync(int ProjectId) {
            return base.Channel.GetProductOwnerForProjectAsync(ProjectId);
        }
        
        public ScrumManagementApp.Common.DTOs.UserDTO[] GetScrumMastersForProject(int ProjectId) {
            return base.Channel.GetScrumMastersForProject(ProjectId);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.UserDTO[]> GetScrumMastersForProjectAsync(int ProjectId) {
            return base.Channel.GetScrumMastersForProjectAsync(ProjectId);
        }
        
        public ScrumManagementApp.Common.DTOs.ProjectDTO GetProjectById(int ProjectID) {
            return base.Channel.GetProjectById(ProjectID);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> GetProjectByIdAsync(int ProjectID) {
            return base.Channel.GetProjectByIdAsync(ProjectID);
        }
        
        public ScrumManagementApp.Common.DTOs.ProjectDTO GetProjectByName(string pProjectName) {
            return base.Channel.GetProjectByName(pProjectName);
        }
        
        public System.Threading.Tasks.Task<ScrumManagementApp.Common.DTOs.ProjectDTO> GetProjectByNameAsync(string pProjectName) {
            return base.Channel.GetProjectByNameAsync(pProjectName);
        }
        
        public bool HasConflictingProjects(int UserID, System.DateTime Start, System.Nullable<System.DateTime> End) {
            return base.Channel.HasConflictingProjects(UserID, Start, End);
        }
        
        public System.Threading.Tasks.Task<bool> HasConflictingProjectsAsync(int UserID, System.DateTime Start, System.Nullable<System.DateTime> End) {
            return base.Channel.HasConflictingProjectsAsync(UserID, Start, End);
        }
        
        public void UpdateProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO) {
            base.Channel.UpdateProject(projectDTO);
        }
        
        public System.Threading.Tasks.Task UpdateProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO) {
            return base.Channel.UpdateProjectAsync(projectDTO);
        }
        
        public void AssignProductOwnerToProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userID) {
            base.Channel.AssignProductOwnerToProject(projectDTO, userID);
        }
        
        public System.Threading.Tasks.Task AssignProductOwnerToProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userID) {
            return base.Channel.AssignProductOwnerToProjectAsync(projectDTO, userID);
        }
        
        public void AssignsScrumMastersToProject(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int[] userIDs) {
            base.Channel.AssignsScrumMastersToProject(projectDTO, userIDs);
        }
        
        public System.Threading.Tasks.Task AssignsScrumMastersToProjectAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int[] userIDs) {
            return base.Channel.AssignsScrumMastersToProjectAsync(projectDTO, userIDs);
        }
        
        public bool IsProjectManager(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsProjectManager(projectDTO, userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProjectManagerAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsProjectManagerAsync(projectDTO, userId);
        }
        
        public bool IsProductOwner(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsProductOwner(projectDTO, userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProductOwnerAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsProductOwnerAsync(projectDTO, userId);
        }
        
        public bool IsScrumMaster(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsScrumMaster(projectDTO, userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsScrumMasterAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsScrumMasterAsync(projectDTO, userId);
        }
        
        public bool IsDeveloper(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsDeveloper(projectDTO, userId);
        }
        
        public System.Threading.Tasks.Task<bool> IsDeveloperAsync(ScrumManagementApp.Common.DTOs.ProjectDTO projectDTO, int userId) {
            return base.Channel.IsDeveloperAsync(projectDTO, userId);
        }
    }
}
